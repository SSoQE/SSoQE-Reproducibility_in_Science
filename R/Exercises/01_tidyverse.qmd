# Tidyverse for Ecologists: From Base R to Modern Data Science

```{r}
#| label: setup
#| include: false
#| output: false
#| echo: false
# set the working directory
library(here)
here::i_am("R/Exercises/01_tidyverse.qmd")

# quarto render options
options(htmltools.dir.version = FALSE)

library(knitr)
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  cache = FALSE,
  out.width = "100%",
  fig.align = "center",
  fig.width = 6,
  fig.asp = 0.618,
  fig.show = "hold"
)

source(
  here::here(
    "R/set_r_theme.R"
  )
)
```

## Introduction

Welcome to the tidyverse! This workshop will transform how you think about data manipulation in R. We'll explore how the tidyverse makes data analysis more intuitive, readable, and reproducible for ecological research.

The **tidyverse** is a collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures. Think of it as a unified language for talking to your data.

```{r}
#| label: libraries
#| include: true
#| output: false
# Load the tidyverse (this loads multiple packages at once)
library(tidyverse)

# We'll also use some additional packages for our ecological examples
library(palmerpenguins) # For penguin data
```

---

## 1. The Magic of Pipes (`%>%`) üîó

### The Problem with Base R

In base R, complex operations often result in:

- Nested functions that are hard to read
- Many intermediate objects
- Code that reads from inside-out

The pipe operator `%>%` is arguably the most transformative feature of the tidyverse. It allows you to write code that reads like a recipe, from left to right, top to bottom.

You can read the pipe as "and then...". It takes the output of the left-hand side and passes it as the first argument to the function on the right-hand side.

### Exercise 1.1: Calculating Mean Body Mass

Let's calculate the mean body mass of penguins, excluding missing values.

**Base R approach:**

```{r base-r-mean}
# Base R: nested functions (reads inside-out)
round(
  mean(
    na.omit(
      palmerpenguins::penguins$body_mass_g
    )
  ),
  2
)
```

**Tidyverse approach:**

```{r tidyverse-pipe}
# Tidyverse: reads like a recipe (top to bottom)
palmerpenguins::penguins$body_mass_g %>% # ..and then ...
  na.omit() %>% # ..and then ...
  mean() %>% # ..and then ...
  round(2)
```

### Exercise 1.2: Nested Functions vs Pipes

Let's see a more complex example with deeply nested functions - a common scenario in ecological data analysis.

**Task**: Calculate the standard deviation of bill lengths for the top 5 heaviest penguins of each species.

**Base R approach (nested nightmare):**
```{r}
#| label: nested-nightmare
# Base R: deeply nested, reads from inside-out
# Task: Get top 5 heaviest penguins per species, then calculate SD of bill length
do.call(
  rbind,
  lapply(
    split(
      palmerpenguins::penguins[
        !is.na(palmerpenguins::penguins$body_mass_g) &
          !is.na(palmerpenguins::penguins$bill_length_mm),
      ],
      palmerpenguins::penguins[
        !is.na(palmerpenguins::penguins$body_mass_g) &
          !is.na(palmerpenguins::penguins$bill_length_mm),
      ]$species
    ),
    function(species_data) {
      top_5 <-
        head(
          species_data[order(
            species_data$body_mass_g,
            decreasing = TRUE
          ), ],
          5
        )
      data.frame(
        species = unique(species_data$species),
        sd_bill_length = sd(top_5$bill_length_mm, na.rm = TRUE)
      )
    }
  )
)
```

**Tidyverse approach (readable recipe):**
```{r pipe-readable}
# Tidyverse: reads like a step-by-step recipe
palmerpenguins::penguins %>%
  dplyr::filter(
    !is.na(body_mass_g),
    !is.na(bill_length_mm)
  ) %>%
  dplyr::arrange(
    dplyr::desc(body_mass_g)
  ) %>%
  dplyr::group_by(species) %>%
  dplyr::slice_head(n = 5) %>%
  dplyr::summarise(
    sd_bill_length = sd(bill_length_mm, na.rm = TRUE),
    .groups = "drop"
  )
```

**üß† Notice the difference:**

- Base R: You have to read from the innermost function outward
- Tidyverse: You read from top to bottom, like following a recipe
- Each step in the pipe is a clear, logical transformation

---

## 2. Tibbles: Data Frames with Superpowers üìä

Tibbles are the tidyverse's enhanced data frames. They're designed to be more user-friendly and informative.

### Exercise 2.1: Comparing Data Frames and Tibbles

Let's compare a regular data frame to a tibble using the `penguins` dataset.

First, convert the `penguins` tibble to a regular data frame:

```{r}
#| label: tibbles-comparison
# Convert penguins to a regular data.frame
penguins_df <-
  as.data.frame(palmerpenguins::penguins)
```

```{r}
#| eval: false
# Print - we need to limit to the first 25
#   Otherewise, it floods the console
print(
  head(penguins_df, 25)
)
```

```{r}
#| echo: false
print.data.frame(
  head(penguins_df, 25)
)
```

Now, let's look at the tibble version:

```{r}
print(palmerpenguins::penguins)
```

**Key differences:**

- Tibbles show data types for each column
- They don't print all columns if they don't fit on screen
- They show the dimensions (rows √ó columns)
- Character strings stay as characters (no automatic factor conversion)

### Exercise 2.2: Creating Tibbles

```{r create-tibbles}
# Create a tibble of ecological sites
sites <-
  tibble::tibble(
    site_id = c("SITE_001", "SITE_002", "SITE_003"),
    latitude = c(60.1, 65.2, 58.9),
    longitude = c(-149.8, -147.3, -152.1),
    elevation_m = c(250, 450, 180),
    habitat_type = c("tundra", "forest", "wetland")
  )

sites
```

---

## 3. dplyr: Grammar of Data Manipulation üîß

`dplyr` provides a consistent set of verbs for solving the most common data manipulation challenges. Think of these as actions you can perform on your data.

### The Main dplyr Verbs

- `filter()`: Pick observations (rows) by their values
- `arrange()`: Reorder the rows
- `select()`: Pick variables (columns) by their names
- `mutate()`: Create new variables with functions of existing variables
- `summarise()`: Collapse many values down to a single summary

### Exercise 3.1: Filtering Data

**Base R:**
```{r filter-base}
# Base R: subset function
data_penguins_large_adelie <-
  palmerpenguins::penguins[
    palmerpenguins::penguins$body_mass_g > 4500 &
      !is.na(palmerpenguins::penguins$body_mass_g) &
      palmerpenguins::penguins$species == "Adelie",
  ]

nrow(data_penguins_large_adelie)
```

**Tidyverse:**

Multiple conditions are easy to read

```{r filter-tidyverse}
# Tidyverse: readable and chainable
data_penguins_large_adelie <-
  palmerpenguins::penguins %>%
  dplyr::filter(
    body_mass_g > 4500,
    !is.na(body_mass_g),
    species == "Adelie"
  )

nrow(data_penguins_large_adelie)
```

### Exercise 3.2: Selecting and Arranging

```{r select-arrange}
# Select specific columns and arrange by body mass
penguin_basics <-
  palmerpenguins::penguins %>%
  # which columns?
  dplyr::select(species, island, body_mass_g, year) %>%
  # arrange by year, then body mass (descending)
  dplyr::arrange(
    year,
    dplyr::desc(body_mass_g)
  )

head(penguin_basics)
```

Select columns by pattern (very useful for ecological data!)

```{r}
# Select columns by pattern (very useful for ecological data!)
data_penguins_measurements <-
  palmerpenguins::penguins %>%
  dplyr::select(
    # specify the name of the columns to keep
    species,
    # select all columns ending with _mm or _g
    dplyr::ends_with("_mm"),
    dplyr::ends_with("_g")
  )

head(data_penguins_measurements)
```

### Exercise 3.3: Creating New Variables

**Base R:**
```{r mutate-base}
# Base R: assignment to new columns
data_penguins <- palmerpenguins::penguins

data_penguins$bill_ratio <-
  data_penguins$bill_length_mm / data_penguins$bill_depth_mm

data_penguins$size_category <-
  ifelse(data_penguins$body_mass_g > 4000, "Large", "Small")

data_penguins$penguin_id <-
  paste(data_penguins$species, seq_len(nrow(data_penguins)), sep = "_")

head(data_penguins[, c("species", "bill_ratio", "size_category", "penguin_id")])
```

**Tidyverse:**
```{r mutate-tidyverse}
# Tidyverse: all transformations in one place
data_penguins_enhanced <-
  palmerpenguins::penguins %>%
  dplyr::mutate(
    bill_ratio = bill_length_mm / bill_depth_mm,
    size_category = dplyr::case_when(
      body_mass_g > 4500 ~ "Large",
      body_mass_g > 3500 ~ "Medium",
      TRUE ~ "Small"
    ),
    # Create a unique identifier
    penguin_id = paste(species, dplyr::row_number(), sep = "_")
  )

data_penguins_enhanced %>%
  dplyr::select(species, bill_ratio, size_category, penguin_id) %>%
  head()
```

### Exercise 3.4: Summarizing Data

Let's start with simple summarization across the entire dataset.

**Base R:**
```{r summarise-base}
# Base R: multiple separate calculations
penguin_count <-
  nrow(palmerpenguins::penguins)

mean_mass <-
  mean(palmerpenguins::penguins$body_mass_g, na.rm = TRUE)

sd_mass <-
  sd(palmerpenguins::penguins$body_mass_g, na.rm = TRUE)

mean_bill_length <-
  mean(palmerpenguins::penguins$bill_length_mm, na.rm = TRUE)

# Combine into a data frame
data_overall_summary <-
  data.frame(
    count = penguin_count,
    mean_mass = mean_mass,
    sd_mass = sd_mass,
    mean_bill_length = mean_bill_length
  )

data_overall_summary
```

**Tidyverse:**
```{r summarise-tidyverse}
# Tidyverse: all calculations in one place
data_overall_summary <-
  palmerpenguins::penguins %>%
  dplyr::summarise(
    count = dplyr::n(),
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    sd_mass = sd(body_mass_g, na.rm = TRUE),
    mean_bill_length = mean(bill_length_mm, na.rm = TRUE)
  )

data_overall_summary
```


## 4. {tidyr}: Pivoting and more! üìê

Pivoting is a common task in ecological data analysis. {`tidyr`} helps you reshape your data into a tidy format where:

- Each variable forms a column
- Each observation forms a row
- Each type of observational unit forms a table

### Exercise 4.1: Wide to Long Format

Ecological data often comes in wide format (species as columns), but analysis often requires long format.

```{r wide-to-long}
# Create some wide-format species abundance data
data_species_wide <-
  tibble::tibble(
    site = paste0("Site_", 1:5),
    treatment = rep(c("Control", "Fertilized"), length.out = 5),
    Betula_nana = c(23, 45, 12, 67, 34),
    Salix_glauca = c(15, 23, 8, 45, 28),
    Vaccinium_uliginosum = c(8, 12, 15, 23, 19)
  )

data_species_wide
```

```{r}
# Convert to long format for analysis
data_species_long <-
  data_species_wide %>%
  tidyr::pivot_longer(
    cols = Betula_nana:Vaccinium_uliginosum,
    names_to = "species",
    values_to = "abundance"
  )

data_species_long
```

### Exercise 4.2: Long to Wide Format

Sometimes you need to go the other direction:

```{r long-to-wide}
# Calculate mean abundance by treatment and species
data_treatment_means <-
  data_species_long %>%
  dplyr::group_by(treatment, species) %>%
  dplyr::summarise(mean_abundance = mean(abundance), .groups = "drop")

data_treatment_means
```

```{r}
# Convert back to wide for a summary table
data_treatment_wide <-
  data_treatment_means %>%
  tidyr::pivot_wider(
    names_from = species,
    values_from = mean_abundance
  )

data_treatment_wide
```

--- 

## Showcase of full {tidyverse} power: A Complete Analysis üî¨

Let's combine everything we've learned in a complete ecological analysis:

### Research Question: How do penguin body measurements vary by species and sex?

```{r complete-analysis}
data_penguins_analysis <-
  palmerpenguins::penguins %>%
  # Clean the data
  dplyr::filter(
    !is.na(sex),
    !is.na(body_mass_g)
  ) %>%
  # Create new variables
  dplyr::mutate(
    bill_ratio = bill_length_mm / bill_depth_mm,
    size_category = dplyr::case_when(
      body_mass_g > 4500 ~ "Large",
      body_mass_g > 3500 ~ "Medium",
      TRUE ~ "Small"
    )
  ) %>%
  # Group and summarize
  dplyr::group_by(species, sex) %>%
  dplyr::summarise(
    n = dplyr::n(),
    mean_body_mass = mean(body_mass_g),
    sd_body_mass = sd(body_mass_g),
    mean_bill_ratio = mean(bill_ratio, na.rm = TRUE),
    sd_bill_ratio = sd(bill_ratio, na.rm = TRUE),
    # Proportion of large individuals
    prop_large = mean(size_category == "Large"),
    .groups = "drop"
  ) %>%
  # Arrange results
  dplyr::arrange(species, sex)

data_penguins_analysis

# Create a visualization using the analysis data
data_penguins_analysis %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = mean_body_mass,
      y = mean_bill_ratio,
      size = n,
      color = species,
      shape = sex
    )
  ) +
  ggplot2::facet_wrap(~species) +
  ggplot2::geom_point(
    data = palmerpenguins::penguins %>%
      dplyr::mutate(
        bill_ratio = bill_length_mm / bill_depth_mm
      ),
    mapping = ggplot2::aes(
      x = body_mass_g,
      y = bill_ratio
    ),
    size = 1,
    alpha = 0.25
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = mean_body_mass,
      y = mean_bill_ratio - sd_bill_ratio,
      xend = mean_body_mass,
      yend = mean_bill_ratio + sd_bill_ratio
    ),
    color = "grey50",
    linewidth = 1
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = mean_body_mass - sd_body_mass,
      y = mean_bill_ratio,
      xend = mean_body_mass + sd_body_mass,
      yend = mean_bill_ratio
    ),
    color = "grey50",
    linewidth = 1
  ) +
  ggplot2::geom_point() +
  ggplot2::scale_size_continuous(
    name = "Sample Size",
    range = c(3, 5),
    guide = ggplot2::guide_legend(
      override.aes = list(shape = 16)
    )
  ) +
  ggplot2::scale_color_viridis_d(
    name = "Species",
    guide = NULL
  ) +
  ggplot2::scale_shape_manual(
    name = "Sex",
    values = c("female" = 15, "male" = 17),
    guide = ggplot2::guide_legend(
      override.aes = list(size = 5)
    )
  ) +
  ggplot2::labs(
    title = "Palmer Penguins Dataset",
    subtitle = "Morphological Relationships by Species and Sex",
    x = "Mean Body Mass (g)",
    y = "Mean Bill Length:Depth Ratio",
  ) +
  theme_ssoqe() +
  ggplot2::theme(
    legend.position = "right",
    legend.box = "vertical"
  )
```

---

## Practice Exercises üí™

### Exercise A: Data Cleaning Challenge

Take this messy ecological dataset and clean it using tidyverse functions:

```{r practice-data}
data_messy <-
  tibble::tibble(
    sample = c("SITE1_PLOT_A_2023", "SITE2_PLOT_B_2023", "SITE1_PLOT_C_2024"),
    species_1 = c("20", "15", "missing"),
    species_2 = c("5", "8", "12"),
    NOTES = c("Betula nana", "Salix glauca", "Betula nana"),
    temp_c = c("15.5", "12.3", "18.1")
  )

data_messy

# Your task: Clean this data to have proper types and structure
# Hints: separate sample info, fix missing values, convert types
```

### Exercise B: Comparison Study

Compare body mass between penguin species using tidyverse functions:

```{r practice-comparison}
# Your task:
# 1. Calculate summary statistics by species
# 2. Find the species with highest variation in body mass
# 3. Create a comparison showing the difference from the overall mean

# Your code here:
```

### Exercise C: Temporal Analysis

Using the penguins data (which includes years), analyze changes over time:

```{r practice-temporal}
# Your task:
# 1. Calculate mean body mass by species and year
# 2. Identify any trends over time
# 3. Find which species-year combination had the largest individuals

# Your code here:
```
